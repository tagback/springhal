{"version":3,"sources":["../lib/hal-model-builder.service.ts"],"names":[],"mappings":"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","file":"hal-model-builder.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HalRestService } from './hal-rest.service'\r\nimport { HalModel } from './hal-model'\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n\r\n\r\nexport class HalModelBuilder {\r\n\r\n    public static readonly PROTOTYPE_IDENT_HAL_PROPERTIES = 'halProperties';\r\n    public static readonly PROTOTYPE_IDENT_HAL_LINKS = 'halLinks';\r\n    public static readonly PROTOTYPE_IDENT_HAL_RESOLVES = 'halResolves';\r\n\r\n    constructor(){}\r\n\r\n    public build<T extends HalModel>(c : {new() : T}, res : any, restService : HalRestService ) : T | T[]{\r\n        return this.parse<T>(c, res, restService);\r\n    }\r\n\r\n\r\n    private parse<T>(c : {new() : T}, response:any, restService : HalRestService, relationName?:string) : T | T[]{\r\n        //console.log(\"ASSIGN:\", response);\r\n\r\n        if(response['_embedded']) {\r\n\r\n            relationName = relationName?relationName:this.findRelationName(response);\r\n            let contentArray = response['_embedded'][relationName];\r\n            if(contentArray && contentArray instanceof Array) {\r\n                let content = new Array<T>();\r\n                for(let objectContent of contentArray) {\r\n                    content.push(this.buildObject<T>(c, objectContent, restService));\r\n                }\r\n                return content;\r\n            } else {\r\n                console.error(\"Can't parse array result: \", response['_embedded'], relationName);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return this.buildObject<T>(c, response, restService);\r\n        \r\n    }\r\n\r\n    private findRelationName(response : any) :string {\r\n        if(!response['_embedded']) {\r\n            return ''\r\n        }\r\n\r\n        for(let key in response['_embedded']) {\r\n            return key;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    private buildObject<T extends any>(c:{new():T}, content:any, restService : HalRestService) : T {\r\n        let instance = new c();\r\n        let wantedProperties = instance[HalModelBuilder.PROTOTYPE_IDENT_HAL_PROPERTIES];\r\n        let wantedLinks = instance[HalModelBuilder.PROTOTYPE_IDENT_HAL_LINKS];\r\n        let wantedResolves = instance[HalModelBuilder.PROTOTYPE_IDENT_HAL_RESOLVES];\r\n\r\n        instance = this.assignProperties(instance, wantedProperties, content);\r\n        instance = this.assignLinks(instance, wantedLinks, content, restService);\r\n        instance = this.assignContent(instance, content['content']);\r\n        instance = this.assignResolves(instance, wantedResolves, restService);\r\n\r\n        return instance;\r\n    }\r\n\r\n    private assignProperties<T>(target:T, wantedProperties:HalPropertyConfig[], content:any) : T {\r\n        if(!wantedProperties) return target;\r\n        for(let conf of wantedProperties) {   \r\n            if(content[conf.relationName]) {\r\n                Object.defineProperty(target,conf.propertyKey,{\r\n                    value:content[conf.relationName]\r\n                });\r\n            }\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    private assignResolves<T>(target:T, wantedResolves:HalResolveConfig[], restService : HalRestService) : T {\r\n        if(!wantedResolves) return target;\r\n        for(let conf of wantedResolves) {\r\n            let current : T;\r\n            restService.resolveAsyncPath(target, conf.propertyPath)\r\n                .subscribe(value => \r\n                        Object.defineProperty(target,conf.propertyKey,{\r\n                            value:value\r\n                        })\r\n                    );\r\n                    \r\n\r\n              \r\n            \r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    private assignContent<T>(target:T, content:any) : T {\r\n        if(!content) return target;\r\n\r\n        for(let propKey in content) {   \r\n            Object.defineProperty(target,propKey,{\r\n               value:content[propKey]\r\n            });\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    private assignLinks<T>(target:T, wantedLinks:HalLinkConfig[], content:any, restService : HalRestService) : T {\r\n        if(!wantedLinks) return target;\r\n\r\n        let links = content['_links'];\r\n        if(!links) return target;\r\n\r\n        for(let conf of wantedLinks) {   \r\n\r\n            if(links[conf.relationName]) {\r\n                let link = links[conf.relationName];\r\n                Object.defineProperty(target,conf.propertyKey,{\r\n                    value:restService.get<any>(link['href'],conf.clazz)\r\n                });\r\n            }\r\n        }\r\n\r\n        return target;\r\n\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\r\nexport class HalLinkConfig {\r\n    clazz:{new():any};\r\n    relationName:string;\r\n    propertyKey:string;\r\n}\r\n\r\nexport class HalPropertyConfig {\r\n    relationName:string;\r\n    propertyKey:string;\r\n}\r\n\r\nexport class HalResolveConfig {\r\n    propertyPath:string;\r\n    propertyKey:string;\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}