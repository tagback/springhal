{"version":3,"sources":["../src/hal-rest.service.ts"],"names":[],"mappings":"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","file":"hal-rest.service.js","sourceRoot":"","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { HalModelBuilder } from './hal-model-builder.service';\r\nimport { HalModel } from './hal-model';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/mergeMap';\r\nimport 'rxjs/add/operator/expand';\r\nimport 'rxjs/add/operator/last';\r\nimport 'rxjs/add/observable/of';\r\nimport 'rxjs/add/observable/empty';\r\nimport 'rxjs/add/observable/from'\r\n\r\n\r\nexport class HalRestService {\r\n\r\n    constructor(private _httpClient: HttpClient,\r\n        private _modelBuilder: HalModelBuilder) {\r\n    }\r\n\r\n    public get<T extends HalModel>(uri: string, c: { new(): T }): Observable<T | T[]> {\r\n\r\n        return this._httpClient.get<Object>(uri)\r\n            .map(res => this._modelBuilder.build(c, res, this));\r\n\r\n\r\n    }\r\n\r\n    public resolveAsyncPath(target: HalModel, propertyPath: string): Observable<any> {\r\n        return this.resolveAsync(target, propertyPath.split('.'))\r\n    }\r\n\r\n    public resolveAsync(target: HalModel, propertyKeys: string[], flatten: boolean = false): Observable<any> {\r\n\r\n        propertyKeys = propertyKeys.reverse();\r\n\r\n        return Observable.of(target).expand((obj:any) => {\r\n\r\n            if (propertyKeys.length == 0) return Observable.empty();\r\n\r\n            let key = propertyKeys.pop();\r\n            let resolvedObj = undefined;\r\n            if(key) {\r\n                resolvedObj = obj[key];\r\n            }\r\n\r\n            if (obj instanceof HalModel\r\n                && resolvedObj instanceof Observable) {\r\n\r\n                if (flatten === true) {\r\n                    return resolvedObj.flatMap((o:any) => {\r\n                        if (o instanceof Array) {\r\n                            let k = propertyKeys;\r\n                            return Observable.from(o).flatMap((o:any) => this.resolveAsync(o, k));\r\n                        }\r\n                        return Observable.of(o);\r\n                    });\r\n                } else {\r\n                    return resolvedObj;\r\n                }\r\n\r\n            } else {\r\n                return Observable.of(resolvedObj);\r\n            }\r\n\r\n        }).last();\r\n\r\n\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: HalModelBuilder, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}